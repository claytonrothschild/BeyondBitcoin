Bash

$ bash <(curl https://install-geth.ethereum.org -L)

$ sudo add-apt-repository ppa:ethereum/ethereum
$ sudo apt-get update
$ sudo apt-get install solc

$ vi ~/genesis.json

{
	"nonce": "0xdeadbeefdeadbeef",
	"timestamp": "0x0",
	"parentHash": "0x0000000000000000000000000000000000000000000000000000000000000000",
	"extraData": "0x0",
	"gasLimit": "0x8000000",
	"difficulty": "0x400",
	"mixhash": "0x0000000000000000000000000000000000000000000000000000000000000000",
	"coinbase": "0x3333333333333333333333333333333333333333",
	"alloc": {
	}
}

$ geth --networkid 120287030292 --datadir ~/.ethereum_experiment --genesis ~/genesis.json console

Geth Console

> personal.newAccount("mypassword");
'[removed]'

> var src = "contract Ballot { struct Voter { uint weight; bool voted; uint8 vote; address delegate; } struct Proposal { string name; string description; string presenters; address creator; uint voteCount; } address public chairperson; uint8 public numberOfProposals; mapping(address => Voter) public voters; mapping(uint8 => Proposal) public proposals; event ProposalAdded(uint8 proposalID, string name, string description, string presenters); function Ballot() { chairperson = msg.sender; voters[chairperson].weight = 1; numberOfProposals = 0; } function giveRightToVote(address voter) { if (msg.sender != chairperson || voters[voter].voted) return; voters[voter].weight = 1; } function delegate(address to) { Voter sender = voters[msg.sender]; if (sender.voted) return; while (voters[to].delegate != address(0) && voters[to].delegate != msg.sender) to = voters[to].delegate; if (to == msg.sender) return; sender.voted = true; sender.delegate = to; Voter delegate = voters[to]; if (delegate.voted) proposals[delegate.vote].voteCount += sender.weight; else delegate.weight += sender.weight; } function vote(uint8 proposal) { Voter sender = voters[msg.sender]; if (sender.voted || proposal >= numberOfProposals) return; sender.voted = true; sender.vote = proposal; proposals[proposal].voteCount += sender.weight; } function getDetails(uint8 proposal) constant returns (string name, string description, string presenters, uint voteCount, address creator) { name = proposals[proposal].name; description = proposals[proposal].description; presenters = proposals[proposal].presenters; voteCount = proposals[proposal].voteCount; creator = proposals[proposal].creator; } function propose(string name, string description, string presenters) returns (uint8 proposalId) { proposals[numberOfProposals].creator = msg.sender; proposals[numberOfProposals].name = name; proposals[numberOfProposals].description = description; proposals[numberOfProposals].presenters = presenters; ProposalAdded(numberOfProposals, name, description, presenters); proposalId = numberOfProposals; numberOfProposals += 1; } function winningProposal() constant returns (uint8 winningProposal, string winningProposalName, string proposalDesc, string proposalPresenters, uint winningCount, uint totalVotes) { uint256 winningVoteCount = 0; for (uint8 proposal = 0; proposal < numberOfProposals; proposal++) { if (proposals[proposal].voteCount > winningVoteCount) { winningVoteCount = proposals[proposal].voteCount; winningProposal = proposal; winningProposalName = proposals[proposal].name; proposalDesc = proposals[proposal].description; proposalPresenters = proposals[proposal].presenters; winningCount = proposals[proposal].voteCount; } totalVotes += proposals[proposal].voteCount; } } }"
undefined
> var b2Compiled = eth.compile.solidity(src)
undefined
> b2Compiled
{
  Ballot: {
    code: "0x60606040525b33600060006101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690830217905550600160016000506000600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050600001600050819055506000600060146101000a81548160ff021916908302179055505b611060806100b66000396000f30060606040523615610074576000357c010000000000000000000000000000000000000000000000000000000090048063526781be146100765780635c19a95c146101d7578063609ff1bd146101ea5780639e7b8d6114610339578063b3f98adc1461034c578063bd51fa4c1461035f57610074565b005b6100876004803590602001506108f3565b604051808060200180602001806020018681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018481038452898181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156101115780820380516001836020036101000a031916815260200191505b508481038352888181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f16801561016a5780820380516001836020036101000a031916815260200191505b508481038252878181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156101c35780820380516001836020036101000a031916815260200191505b509850505050505050505060405180910390f35b6101e860048035906020015061051d565b005b6101f5600450610db1565b604051808760ff1681526020018060200180602001806020018681526020018581526020018481038452898181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156102725780820380516001836020036101000a031916815260200191505b508481038352888181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156102cb5780820380516001836020036101000a031916815260200191505b508481038252878181518152602001915080519060200190808383829060006004602084601f0104600302600f01f150905090810190601f1680156103245780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b61034a60048035906020015061043b565b005b61035d600480359060200150610814565b005b6104396004803590602001906004018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505090803590602001906004018035906020019191908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505090803590602001906004018035906020019191908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509050610b2b565b005b600060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415806104d45750600160005060008273ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060010160009054906101000a900460ff165b156104de5761051a565b6001600160005060008373ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600050600001600050819055505b50565b60006000600160005060003373ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005091508160010160009054906101000a900460ff161561056e5761080f565b5b600073ffffffffffffffffffffffffffffffffffffffff16600160005060008573ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060010160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415801561067c57503373ffffffffffffffffffffffffffffffffffffffff16600160005060008573ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060010160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614155b156106dd57600160005060008473ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005060010160029054906101000a900473ffffffffffffffffffffffffffffffffffffffff169250825061056f565b3373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107165761080f565b60018260010160006101000a81548160ff02191690830217905550828260010160026101000a81548173ffffffffffffffffffffffffffffffffffffffff02191690830217905550600160005060008473ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005090508060010160009054906101000a900460ff16156107f2578160000160005054600260005060008360010160019054906101000a900460ff1660ff16815260200190815260200160002060005060040160008282825054019250508190555061080e565b8160000160005054816000016000828282505401925050819055505b5b505050565b6000600160005060003373ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060005090508060010160009054906101000a900460ff16806108795750600060149054906101000a900460ff1660ff168260ff1610155b15610883576108ef565b60018160010160006101000a81548160ff02191690830217905550818160010160016101000a81548160ff021916908302179055508060000160005054600260005060008460ff1681526020019081526020016000206000506004016000828282505401925050819055505b5050565b60206040519081016040528060008152602001506020604051908101604052806000815260200150602060405190810160405280600081526020015060006000600260005060008760ff168152602001908152602001600020600050600001600050805480601f016020809104026020016040519081016040528092919081815260200182805480156109ab57820191906000526020600020905b81548152906001019060200180831161098e57829003601f168201915b505050505094508450600260005060008760ff168152602001908152602001600020600050600101600050805480601f01602080910402602001604051908101604052809291908181526020018280548015610a2c57820191906000526020600020905b815481529060010190602001808311610a0f57829003601f168201915b505050505093508350600260005060008760ff168152602001908152602001600020600050600201600050805480601f01602080910402602001604051908101604052809291908181526020018280548015610aad57820191906000526020600020905b815481529060010190602001808311610a9057829003601f168201915b505050505092508250600260005060008760ff1681526020019081526020016000206000506004016000505491508150600260005060008760ff16815260200190815260200160002060005060030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080505b91939590929450565b3360026000506000600060149054906101000a900460ff1660ff16815260200190815260200160002060005060030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908302179055508260026000506000600060149054906101000a900460ff1660ff168152602001908152602001600020600050600001600050908051906020019082805482825590600052602060002090601f01602090048101928215610bff579182015b82811115610bfe578251826000505591602001919060010190610be0565b5b509050610c2a9190610c0c565b80821115610c265760008181506000905550600101610c0c565b5090565b50508160026000506000600060149054906101000a900460ff1660ff168152602001908152602001600020600050600101600050908051906020019082805482825590600052602060002090601f01602090048101928215610ca9579182015b82811115610ca8578251826000505591602001919060010190610c8a565b5b509050610cd49190610cb6565b80821115610cd05760008181506000905550600101610cb6565b5090565b50508060026000506000600060149054906101000a900460ff1660ff168152602001908152602001600020600050600201600050908051906020019082805482825590600052602060002090601f01602090048101928215610d53579182015b82811115610d52578251826000505591602001919060010190610d34565b5b509050610d7e9190610d60565b80821115610d7a5760008181506000905550600101610d60565b5090565b50506001600060148282829054906101000a900460ff160192506101000a81548160ff021916908302179055505b505050565b6000602060405190810160405280600081526020015060206040519081016040528060008152602001506020604051908101604052806000815260200150600060006000600060009150600090505b600060149054906101000a900460ff1660ff168160ff1610156110555781600260005060008360ff16815260200190815260200160002060005060040160005054111561101e57600260005060008260ff16815260200190815260200160002060005060040160005054915081508097508750600260005060008260ff168152602001908152602001600020600050600001600050805480601f01602080910402602001604051908101604052809291908181526020018280548015610eeb57820191906000526020600020905b815481529060010190602001808311610ece57829003601f168201915b505050505096508650600260005060008260ff168152602001908152602001600020600050600101600050805480601f01602080910402602001604051908101604052809291908181526020018280548015610f6c57820191906000526020600020905b815481529060010190602001808311610f4f57829003601f168201915b505050505095508550600260005060008260ff168152602001908152602001600020600050600201600050805480601f01602080910402602001604051908101604052809291908181526020018280548015610fed57820191906000526020600020905b815481529060010190602001808311610fd057829003601f168201915b505050505094508450600260005060008260ff16815260200190815260200160002060005060040160005054935083505b600260005060008260ff168152602001908152602001600020600050600401600050548301925082505b8080600101915050610e00565b5b505090919293949556",
    info: {
      abiDefinition: [{...}, {...}, {...}, {...}, {...}, {...}, {...}],
      compilerOptions: "--binary file --json-abi file --natspec-user file --natspec-dev file --add-std 1",
      compilerVersion: "0.1.1",
      developerDoc: {
        methods: {}
      },
      language: "Solidity",
      languageVersion: "0.1.1",
      source: "contract Ballot { struct Voter { uint weight; bool voted; uint8 vote; address delegate; } struct Proposal { string name; string description; string presenters; address creator; uint voteCount; } address chairperson; uint8 numberOfProposals; mapping(address => Voter) voters; mapping(uint8 => Proposal) proposals; function Ballot() { chairperson = msg.sender; voters[chairperson].weight = 1; numberOfProposals = 0; } function giveRightToVote(address voter) { if (msg.sender != chairperson || voters[voter].voted) return; voters[voter].weight = 1; } function delegate(address to) { Voter sender = voters[msg.sender]; if (sender.voted) return; while (voters[to].delegate != address(0) && voters[to].delegate != msg.sender) to = voters[to].delegate; if (to == msg.sender) return; sender.voted = true; sender.delegate = to; Voter delegate = voters[to]; if (delegate.voted) proposals[delegate.vote].voteCount += sender.weight; else delegate.weight += sender.weight; } function vote(uint8 proposal) { Voter sender = voters[msg.sender]; if (sender.voted || proposal >= numberOfProposals) return; sender.voted = true; sender.vote = proposal; proposals[proposal].voteCount += sender.weight; } function getDetails(uint8 proposal) constant returns (string name, string description, string presenters, uint voteCount, address creator) { name = proposals[proposal].name; description = proposals[proposal].description; presenters = proposals[proposal].presenters; voteCount = proposals[proposal].voteCount; creator = proposals[proposal].creator; } function propose(string name, string description, string presenters) { proposals[numberOfProposals].creator = msg.sender; proposals[numberOfProposals].name = name; proposals[numberOfProposals].description = description; proposals[numberOfProposals].presenters = presenters; numberOfProposals += 1; } function winningProposal() constant returns (uint8 winningProposal, string winningProposalName, string proposalDesc, string proposalPresenters, uint winningCount, uint totalVotes) { uint256 winningVoteCount = 0; for (uint8 proposal = 0; proposal < numberOfProposals; proposal++) { if (proposals[proposal].voteCount > winningVoteCount) { winningVoteCount = proposals[proposal].voteCount; winningProposal = proposal; winningProposalName = proposals[proposal].name; proposalDesc = proposals[proposal].description; proposalPresenters = proposals[proposal].presenters; winningCount = proposals[proposal].voteCount; } totalVotes += proposals[proposal].voteCount; } } } ",
      userDoc: {
        methods: {}
      }
    }
  }
}

> var b2Contract = web3.eth.contract(b2Compiled.Ballot.info.abiDefinition);
undefined
>
> var b2 = b2Contract.new({from:web3.eth.accounts[0], data: b2Compiled.Ballot.code, gas: 3000000}, function(e, contract)
.. {
...... if(!e)
...... {
.......... if(!contract.address)
.......... {
.............. console.log("Contract transaction send: TransactionHash: " + contract.transactionHash + " waiting to be mined...");
.............. }
.......... else
.......... {
.............. console.log("Contract mined! Address: " + contract.address);
.............. console.log(contract);
.............. }
.......... }
...... else
...... {
.......... console.log(e);
.......... }
...... })
I1003 13:53:02.703202    4979 xeth.go:995] Tx(0xfd53b6b2c4885bccf96c34f94d01b86e8c50eb36d28332040619f17f0568a962) created: 0xd2e254156d4287bd031197810f98b6cec591f352
Contract transaction send: TransactionHash: 0xfd53b6b2c4885bccf96c34f94d01b86e8c50eb36d28332040619f17f0568a962 waiting to be mined...
undefined
> miner.start(1)
true
> I1003 13:53:07.212514    4979 miner.go:119] Starting mining operation (CPU=4 TOT=5)
I1003 13:53:07.214286    4979 worker.go:540] commit new work on block 915 with 1 txs & 0 uncles. Took 1.576566ms
mineI1003 13:53:08.062269    4979 worker.go:323] 🔨  Mined block (#915 / 200d65a6). Wait 5 blocks for confirmation
I1003 13:53:08.063296    4979 worker.go:540] commit new work on block 916 with 0 txs & 0 uncles. Took 783.729µs
I1003 13:53:08.063375    4979 worker.go:421] 🔨 🔗  Mined 5 blocks back: block #910
I1003 13:53:08.064625    4979 worker.go:540] commit new work on block 916 with 0 txs & 0 uncles. Took 386.634µs
rContract mined! Address: 0xd2e254156d4287bd031197810f98b6cec591f352
[object Object]

> b2
{
  address: "0xd2e254156d4287bd031197810f98b6cec591f352",
  transactionHash: "0xfd53b6b2c4885bccf96c34f94d01b86e8c50eb36d28332040619f17f0568a962",
  allEvents: function(),
  delegate: function(),
  getDetails: function(),
  giveRightToVote: function(),
  propose: function(),
  vote: function(),
  winningProposal: function()
}

> var res = b2.propose("Beyond Bitcoin", "Creative Destruction through the Blockchain", "Clayton Rothschild & Mikael Sanchez", {from: eth.accounts[1], gas: 10000000})
I1003 14:00:48.742100    4979 xeth.go:997] Tx(0x01133d575b47ee32011832d75c8e54fe0c5f9c6bfaed20baac705d9c8eed1f33) to: 0xd2e254156d4287bd031197810f98b6cec591f352
undefined
> miner.start(1)
true
> I1003 14:00:53.732760    4979 miner.go:119] Starting mining operation (CPU=4 TOT=5)
I1003 14:00:53.735513    4979 worker.go:540] commit new work on block 941 with 1 txs & 0 uncles. Took 2.702606ms
I1003 14:00:54.210829    4979 worker.go:323] 🔨  Mined block (#941 / 9c237b78). Wait 5 blocks for confirmation

> b2.getDetails(0)
["Beyond Bitcoin", "Creative Destruction through the Blockchain", "Clayton Rothschild & Mikael Sanchez", 0, "0xa0d28371d8677e70095a6af734c4835f3b642b2f"]